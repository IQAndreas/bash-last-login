#!/bin/bash

# Looks at the file located in `~/.hostnames`, and returns a "friendly" name for the passed in host name.
# If no argument is passed or an empty string is passed in, the host to be looked up defaults to
# the value returned by `hostname`. NOTE: This is not necissarily the value that shows up if you connect
# remotely to another computer, as if you are behind a firewall, the host name provided by your ISP
# is likely to show up instead.
#
# Arguments:
#	$1 - The host name to make "more friendly" (optional, see above notice)
# 
# Returns:
#	The "friendly name", otherwise outputs nothing and returns an exit value of 1.
#	If you want to get the "friendly name" only if available, use code like this:
#		$ friendly_hostname=$(friendly-hostname "$host")
#		$ echo "${friendly_hostname:-$host}"
# 
# Example usage - Assuming the `.hostnames` file looks something like this:
#	localhost this computer
#	127.0.0.1 this computer
#	192.168.0.100 RasperriPI
#	123-24-248-112.client.mchsi.com home
#	dsl-123-53.geneseo.net work
#	172.56.2x.yz Bob's house
#
# Then this will be the commands and respective outputs of the script
#	$ friendly-hostname                                     # Output: this computer
#	$ friendly-hostname localhost                           # Output: this computer
#	$ friendly-hostname "123-24-248-112.client.mchsi.com"   # Output: home
#	$ friendly-hostname "dsl-123-53.geneseo.net"            # Output: work
#	$ friendly-hostname "172.56.2x.yz"                      # Output: Bob's house

hostname=${1:-$(hostname)}

        # Ignore comments         # Find the host       # Remove the host name
value=$(grep -v "^#" ~/.hostnames | grep "$hostname .*" | cut -d ' ' -f2-)
if [ $? -eq 0 ]; then
    echo "$value"
else
    exit 1;
fi

